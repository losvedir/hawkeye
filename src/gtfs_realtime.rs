// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct FeedMessage {
    // message fields
    header: ::protobuf::SingularPtrField<FeedHeader>,
    entity: ::protobuf::RepeatedField<FeedEntity>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FeedMessage {
    pub fn new() -> FeedMessage {
        ::std::default::Default::default()
    }

    // required .FeedHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: FeedHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut FeedHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> FeedHeader {
        self.header.take().unwrap_or_else(|| FeedHeader::new())
    }

    pub fn get_header(&self) -> &FeedHeader {
        self.header.as_ref().unwrap_or_else(|| FeedHeader::default_instance())
    }

    // repeated .FeedEntity entity = 2;

    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::protobuf::RepeatedField<FeedEntity>) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entity(&mut self) -> &mut ::protobuf::RepeatedField<FeedEntity> {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::protobuf::RepeatedField<FeedEntity> {
        ::std::mem::replace(&mut self.entity, ::protobuf::RepeatedField::new())
    }

    pub fn get_entity(&self) -> &[FeedEntity] {
        &self.entity
    }
}

impl ::protobuf::Message for FeedMessage {
    fn is_initialized(&self) -> bool {
        if self.header.is_none() {
            return false;
        }
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.entity {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entity)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.entity {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.entity {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedMessage {
        FeedMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FeedHeader>>(
                    "header",
                    |m: &FeedMessage| { &m.header },
                    |m: &mut FeedMessage| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FeedEntity>>(
                    "entity",
                    |m: &FeedMessage| { &m.entity },
                    |m: &mut FeedMessage| { &mut m.entity },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FeedMessage>(
                    "FeedMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FeedMessage {
        static mut instance: ::protobuf::lazy::Lazy<FeedMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FeedMessage,
        };
        unsafe {
            instance.get(FeedMessage::new)
        }
    }
}

impl ::protobuf::Clear for FeedMessage {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_entity();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeedMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FeedHeader {
    // message fields
    gtfs_realtime_version: ::protobuf::SingularField<::std::string::String>,
    incrementality: ::std::option::Option<FeedHeader_Incrementality>,
    timestamp: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FeedHeader {
    pub fn new() -> FeedHeader {
        ::std::default::Default::default()
    }

    // required string gtfs_realtime_version = 1;

    pub fn clear_gtfs_realtime_version(&mut self) {
        self.gtfs_realtime_version.clear();
    }

    pub fn has_gtfs_realtime_version(&self) -> bool {
        self.gtfs_realtime_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gtfs_realtime_version(&mut self, v: ::std::string::String) {
        self.gtfs_realtime_version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gtfs_realtime_version(&mut self) -> &mut ::std::string::String {
        if self.gtfs_realtime_version.is_none() {
            self.gtfs_realtime_version.set_default();
        }
        self.gtfs_realtime_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_gtfs_realtime_version(&mut self) -> ::std::string::String {
        self.gtfs_realtime_version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_gtfs_realtime_version(&self) -> &str {
        match self.gtfs_realtime_version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .FeedHeader.Incrementality incrementality = 2;

    pub fn clear_incrementality(&mut self) {
        self.incrementality = ::std::option::Option::None;
    }

    pub fn has_incrementality(&self) -> bool {
        self.incrementality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_incrementality(&mut self, v: FeedHeader_Incrementality) {
        self.incrementality = ::std::option::Option::Some(v);
    }

    pub fn get_incrementality(&self) -> FeedHeader_Incrementality {
        self.incrementality.unwrap_or(FeedHeader_Incrementality::FULL_DATASET)
    }

    // optional uint64 timestamp = 3;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }
}

impl ::protobuf::Message for FeedHeader {
    fn is_initialized(&self) -> bool {
        if self.gtfs_realtime_version.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.gtfs_realtime_version)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.incrementality, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gtfs_realtime_version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.incrementality {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gtfs_realtime_version.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.incrementality {
            os.write_enum(2, v.value())?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedHeader {
        FeedHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gtfs_realtime_version",
                    |m: &FeedHeader| { &m.gtfs_realtime_version },
                    |m: &mut FeedHeader| { &mut m.gtfs_realtime_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FeedHeader_Incrementality>>(
                    "incrementality",
                    |m: &FeedHeader| { &m.incrementality },
                    |m: &mut FeedHeader| { &mut m.incrementality },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &FeedHeader| { &m.timestamp },
                    |m: &mut FeedHeader| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FeedHeader>(
                    "FeedHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FeedHeader {
        static mut instance: ::protobuf::lazy::Lazy<FeedHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FeedHeader,
        };
        unsafe {
            instance.get(FeedHeader::new)
        }
    }
}

impl ::protobuf::Clear for FeedHeader {
    fn clear(&mut self) {
        self.clear_gtfs_realtime_version();
        self.clear_incrementality();
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeedHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FeedHeader_Incrementality {
    FULL_DATASET = 0,
    DIFFERENTIAL = 1,
}

impl ::protobuf::ProtobufEnum for FeedHeader_Incrementality {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FeedHeader_Incrementality> {
        match value {
            0 => ::std::option::Option::Some(FeedHeader_Incrementality::FULL_DATASET),
            1 => ::std::option::Option::Some(FeedHeader_Incrementality::DIFFERENTIAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FeedHeader_Incrementality] = &[
            FeedHeader_Incrementality::FULL_DATASET,
            FeedHeader_Incrementality::DIFFERENTIAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("FeedHeader_Incrementality", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for FeedHeader_Incrementality {
}

impl ::protobuf::reflect::ProtobufValue for FeedHeader_Incrementality {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FeedEntity {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    is_deleted: ::std::option::Option<bool>,
    trip_update: ::protobuf::SingularPtrField<TripUpdate>,
    vehicle: ::protobuf::SingularPtrField<VehiclePosition>,
    alert: ::protobuf::SingularPtrField<Alert>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FeedEntity {
    pub fn new() -> FeedEntity {
        ::std::default::Default::default()
    }

    // required string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional bool is_deleted = 2;

    pub fn clear_is_deleted(&mut self) {
        self.is_deleted = ::std::option::Option::None;
    }

    pub fn has_is_deleted(&self) -> bool {
        self.is_deleted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_deleted(&mut self, v: bool) {
        self.is_deleted = ::std::option::Option::Some(v);
    }

    pub fn get_is_deleted(&self) -> bool {
        self.is_deleted.unwrap_or(false)
    }

    // optional .TripUpdate trip_update = 3;

    pub fn clear_trip_update(&mut self) {
        self.trip_update.clear();
    }

    pub fn has_trip_update(&self) -> bool {
        self.trip_update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip_update(&mut self, v: TripUpdate) {
        self.trip_update = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip_update(&mut self) -> &mut TripUpdate {
        if self.trip_update.is_none() {
            self.trip_update.set_default();
        }
        self.trip_update.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip_update(&mut self) -> TripUpdate {
        self.trip_update.take().unwrap_or_else(|| TripUpdate::new())
    }

    pub fn get_trip_update(&self) -> &TripUpdate {
        self.trip_update.as_ref().unwrap_or_else(|| TripUpdate::default_instance())
    }

    // optional .VehiclePosition vehicle = 4;

    pub fn clear_vehicle(&mut self) {
        self.vehicle.clear();
    }

    pub fn has_vehicle(&self) -> bool {
        self.vehicle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vehicle(&mut self, v: VehiclePosition) {
        self.vehicle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vehicle(&mut self) -> &mut VehiclePosition {
        if self.vehicle.is_none() {
            self.vehicle.set_default();
        }
        self.vehicle.as_mut().unwrap()
    }

    // Take field
    pub fn take_vehicle(&mut self) -> VehiclePosition {
        self.vehicle.take().unwrap_or_else(|| VehiclePosition::new())
    }

    pub fn get_vehicle(&self) -> &VehiclePosition {
        self.vehicle.as_ref().unwrap_or_else(|| VehiclePosition::default_instance())
    }

    // optional .Alert alert = 5;

    pub fn clear_alert(&mut self) {
        self.alert.clear();
    }

    pub fn has_alert(&self) -> bool {
        self.alert.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alert(&mut self, v: Alert) {
        self.alert = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alert(&mut self) -> &mut Alert {
        if self.alert.is_none() {
            self.alert.set_default();
        }
        self.alert.as_mut().unwrap()
    }

    // Take field
    pub fn take_alert(&mut self) -> Alert {
        self.alert.take().unwrap_or_else(|| Alert::new())
    }

    pub fn get_alert(&self) -> &Alert {
        self.alert.as_ref().unwrap_or_else(|| Alert::default_instance())
    }
}

impl ::protobuf::Message for FeedEntity {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        for v in &self.trip_update {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vehicle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.alert {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_deleted = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip_update)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vehicle)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alert)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.is_deleted {
            my_size += 2;
        }
        if let Some(ref v) = self.trip_update.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.alert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.is_deleted {
            os.write_bool(2, v)?;
        }
        if let Some(ref v) = self.trip_update.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.alert.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedEntity {
        FeedEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &FeedEntity| { &m.id },
                    |m: &mut FeedEntity| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_deleted",
                    |m: &FeedEntity| { &m.is_deleted },
                    |m: &mut FeedEntity| { &mut m.is_deleted },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate>>(
                    "trip_update",
                    |m: &FeedEntity| { &m.trip_update },
                    |m: &mut FeedEntity| { &mut m.trip_update },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehiclePosition>>(
                    "vehicle",
                    |m: &FeedEntity| { &m.vehicle },
                    |m: &mut FeedEntity| { &mut m.vehicle },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Alert>>(
                    "alert",
                    |m: &FeedEntity| { &m.alert },
                    |m: &mut FeedEntity| { &mut m.alert },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FeedEntity>(
                    "FeedEntity",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FeedEntity {
        static mut instance: ::protobuf::lazy::Lazy<FeedEntity> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FeedEntity,
        };
        unsafe {
            instance.get(FeedEntity::new)
        }
    }
}

impl ::protobuf::Clear for FeedEntity {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_is_deleted();
        self.clear_trip_update();
        self.clear_vehicle();
        self.clear_alert();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeedEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate {
    // message fields
    trip: ::protobuf::SingularPtrField<TripDescriptor>,
    vehicle: ::protobuf::SingularPtrField<VehicleDescriptor>,
    stop_time_update: ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate>,
    timestamp: ::std::option::Option<u64>,
    delay: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TripUpdate {
    pub fn new() -> TripUpdate {
        ::std::default::Default::default()
    }

    // required .TripDescriptor trip = 1;

    pub fn clear_trip(&mut self) {
        self.trip.clear();
    }

    pub fn has_trip(&self) -> bool {
        self.trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip(&mut self, v: TripDescriptor) {
        self.trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip(&mut self) -> &mut TripDescriptor {
        if self.trip.is_none() {
            self.trip.set_default();
        }
        self.trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip(&mut self) -> TripDescriptor {
        self.trip.take().unwrap_or_else(|| TripDescriptor::new())
    }

    pub fn get_trip(&self) -> &TripDescriptor {
        self.trip.as_ref().unwrap_or_else(|| TripDescriptor::default_instance())
    }

    // optional .VehicleDescriptor vehicle = 3;

    pub fn clear_vehicle(&mut self) {
        self.vehicle.clear();
    }

    pub fn has_vehicle(&self) -> bool {
        self.vehicle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vehicle(&mut self, v: VehicleDescriptor) {
        self.vehicle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vehicle(&mut self) -> &mut VehicleDescriptor {
        if self.vehicle.is_none() {
            self.vehicle.set_default();
        }
        self.vehicle.as_mut().unwrap()
    }

    // Take field
    pub fn take_vehicle(&mut self) -> VehicleDescriptor {
        self.vehicle.take().unwrap_or_else(|| VehicleDescriptor::new())
    }

    pub fn get_vehicle(&self) -> &VehicleDescriptor {
        self.vehicle.as_ref().unwrap_or_else(|| VehicleDescriptor::default_instance())
    }

    // repeated .TripUpdate.StopTimeUpdate stop_time_update = 2;

    pub fn clear_stop_time_update(&mut self) {
        self.stop_time_update.clear();
    }

    // Param is passed by value, moved
    pub fn set_stop_time_update(&mut self, v: ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate>) {
        self.stop_time_update = v;
    }

    // Mutable pointer to the field.
    pub fn mut_stop_time_update(&mut self) -> &mut ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate> {
        &mut self.stop_time_update
    }

    // Take field
    pub fn take_stop_time_update(&mut self) -> ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate> {
        ::std::mem::replace(&mut self.stop_time_update, ::protobuf::RepeatedField::new())
    }

    pub fn get_stop_time_update(&self) -> &[TripUpdate_StopTimeUpdate] {
        &self.stop_time_update
    }

    // optional uint64 timestamp = 4;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }

    // optional int32 delay = 5;

    pub fn clear_delay(&mut self) {
        self.delay = ::std::option::Option::None;
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: i32) {
        self.delay = ::std::option::Option::Some(v);
    }

    pub fn get_delay(&self) -> i32 {
        self.delay.unwrap_or(0)
    }
}

impl ::protobuf::Message for TripUpdate {
    fn is_initialized(&self) -> bool {
        if self.trip.is_none() {
            return false;
        }
        for v in &self.trip {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vehicle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop_time_update {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vehicle)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.stop_time_update)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.delay = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.stop_time_update {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.delay {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.stop_time_update {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.timestamp {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.delay {
            os.write_int32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate {
        TripUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor>>(
                    "trip",
                    |m: &TripUpdate| { &m.trip },
                    |m: &mut TripUpdate| { &mut m.trip },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehicleDescriptor>>(
                    "vehicle",
                    |m: &TripUpdate| { &m.vehicle },
                    |m: &mut TripUpdate| { &mut m.vehicle },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeUpdate>>(
                    "stop_time_update",
                    |m: &TripUpdate| { &m.stop_time_update },
                    |m: &mut TripUpdate| { &mut m.stop_time_update },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &TripUpdate| { &m.timestamp },
                    |m: &mut TripUpdate| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "delay",
                    |m: &TripUpdate| { &m.delay },
                    |m: &mut TripUpdate| { &mut m.delay },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripUpdate>(
                    "TripUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TripUpdate {
        static mut instance: ::protobuf::lazy::Lazy<TripUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TripUpdate,
        };
        unsafe {
            instance.get(TripUpdate::new)
        }
    }
}

impl ::protobuf::Clear for TripUpdate {
    fn clear(&mut self) {
        self.clear_trip();
        self.clear_vehicle();
        self.clear_stop_time_update();
        self.clear_timestamp();
        self.clear_delay();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate_StopTimeEvent {
    // message fields
    delay: ::std::option::Option<i32>,
    time: ::std::option::Option<i64>,
    uncertainty: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TripUpdate_StopTimeEvent {
    pub fn new() -> TripUpdate_StopTimeEvent {
        ::std::default::Default::default()
    }

    // optional int32 delay = 1;

    pub fn clear_delay(&mut self) {
        self.delay = ::std::option::Option::None;
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: i32) {
        self.delay = ::std::option::Option::Some(v);
    }

    pub fn get_delay(&self) -> i32 {
        self.delay.unwrap_or(0)
    }

    // optional int64 time = 2;

    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i64) {
        self.time = ::std::option::Option::Some(v);
    }

    pub fn get_time(&self) -> i64 {
        self.time.unwrap_or(0)
    }

    // optional int32 uncertainty = 3;

    pub fn clear_uncertainty(&mut self) {
        self.uncertainty = ::std::option::Option::None;
    }

    pub fn has_uncertainty(&self) -> bool {
        self.uncertainty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uncertainty(&mut self, v: i32) {
        self.uncertainty = ::std::option::Option::Some(v);
    }

    pub fn get_uncertainty(&self) -> i32 {
        self.uncertainty.unwrap_or(0)
    }
}

impl ::protobuf::Message for TripUpdate_StopTimeEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.delay = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.uncertainty = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.delay {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.uncertainty {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.delay {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.time {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.uncertainty {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate_StopTimeEvent {
        TripUpdate_StopTimeEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "delay",
                    |m: &TripUpdate_StopTimeEvent| { &m.delay },
                    |m: &mut TripUpdate_StopTimeEvent| { &mut m.delay },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "time",
                    |m: &TripUpdate_StopTimeEvent| { &m.time },
                    |m: &mut TripUpdate_StopTimeEvent| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "uncertainty",
                    |m: &TripUpdate_StopTimeEvent| { &m.uncertainty },
                    |m: &mut TripUpdate_StopTimeEvent| { &mut m.uncertainty },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripUpdate_StopTimeEvent>(
                    "TripUpdate_StopTimeEvent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TripUpdate_StopTimeEvent {
        static mut instance: ::protobuf::lazy::Lazy<TripUpdate_StopTimeEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TripUpdate_StopTimeEvent,
        };
        unsafe {
            instance.get(TripUpdate_StopTimeEvent::new)
        }
    }
}

impl ::protobuf::Clear for TripUpdate_StopTimeEvent {
    fn clear(&mut self) {
        self.clear_delay();
        self.clear_time();
        self.clear_uncertainty();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate_StopTimeEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate_StopTimeUpdate {
    // message fields
    stop_sequence: ::std::option::Option<u32>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    arrival: ::protobuf::SingularPtrField<TripUpdate_StopTimeEvent>,
    departure: ::protobuf::SingularPtrField<TripUpdate_StopTimeEvent>,
    schedule_relationship: ::std::option::Option<TripUpdate_StopTimeUpdate_ScheduleRelationship>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TripUpdate_StopTimeUpdate {
    pub fn new() -> TripUpdate_StopTimeUpdate {
        ::std::default::Default::default()
    }

    // optional uint32 stop_sequence = 1;

    pub fn clear_stop_sequence(&mut self) {
        self.stop_sequence = ::std::option::Option::None;
    }

    pub fn has_stop_sequence(&self) -> bool {
        self.stop_sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_sequence(&mut self, v: u32) {
        self.stop_sequence = ::std::option::Option::Some(v);
    }

    pub fn get_stop_sequence(&self) -> u32 {
        self.stop_sequence.unwrap_or(0)
    }

    // optional string stop_id = 4;

    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .TripUpdate.StopTimeEvent arrival = 2;

    pub fn clear_arrival(&mut self) {
        self.arrival.clear();
    }

    pub fn has_arrival(&self) -> bool {
        self.arrival.is_some()
    }

    // Param is passed by value, moved
    pub fn set_arrival(&mut self, v: TripUpdate_StopTimeEvent) {
        self.arrival = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_arrival(&mut self) -> &mut TripUpdate_StopTimeEvent {
        if self.arrival.is_none() {
            self.arrival.set_default();
        }
        self.arrival.as_mut().unwrap()
    }

    // Take field
    pub fn take_arrival(&mut self) -> TripUpdate_StopTimeEvent {
        self.arrival.take().unwrap_or_else(|| TripUpdate_StopTimeEvent::new())
    }

    pub fn get_arrival(&self) -> &TripUpdate_StopTimeEvent {
        self.arrival.as_ref().unwrap_or_else(|| TripUpdate_StopTimeEvent::default_instance())
    }

    // optional .TripUpdate.StopTimeEvent departure = 3;

    pub fn clear_departure(&mut self) {
        self.departure.clear();
    }

    pub fn has_departure(&self) -> bool {
        self.departure.is_some()
    }

    // Param is passed by value, moved
    pub fn set_departure(&mut self, v: TripUpdate_StopTimeEvent) {
        self.departure = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_departure(&mut self) -> &mut TripUpdate_StopTimeEvent {
        if self.departure.is_none() {
            self.departure.set_default();
        }
        self.departure.as_mut().unwrap()
    }

    // Take field
    pub fn take_departure(&mut self) -> TripUpdate_StopTimeEvent {
        self.departure.take().unwrap_or_else(|| TripUpdate_StopTimeEvent::new())
    }

    pub fn get_departure(&self) -> &TripUpdate_StopTimeEvent {
        self.departure.as_ref().unwrap_or_else(|| TripUpdate_StopTimeEvent::default_instance())
    }

    // optional .TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;

    pub fn clear_schedule_relationship(&mut self) {
        self.schedule_relationship = ::std::option::Option::None;
    }

    pub fn has_schedule_relationship(&self) -> bool {
        self.schedule_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule_relationship(&mut self, v: TripUpdate_StopTimeUpdate_ScheduleRelationship) {
        self.schedule_relationship = ::std::option::Option::Some(v);
    }

    pub fn get_schedule_relationship(&self) -> TripUpdate_StopTimeUpdate_ScheduleRelationship {
        self.schedule_relationship.unwrap_or(TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED)
    }
}

impl ::protobuf::Message for TripUpdate_StopTimeUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.arrival {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.departure {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.stop_sequence = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.arrival)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.departure)?;
                },
                5 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.schedule_relationship, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.stop_sequence {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.arrival.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.departure.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.schedule_relationship {
            my_size += ::protobuf::rt::enum_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.stop_sequence {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.arrival.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.departure.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.schedule_relationship {
            os.write_enum(5, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate_StopTimeUpdate {
        TripUpdate_StopTimeUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "stop_sequence",
                    |m: &TripUpdate_StopTimeUpdate| { &m.stop_sequence },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.stop_sequence },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "stop_id",
                    |m: &TripUpdate_StopTimeUpdate| { &m.stop_id },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.stop_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeEvent>>(
                    "arrival",
                    |m: &TripUpdate_StopTimeUpdate| { &m.arrival },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.arrival },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeEvent>>(
                    "departure",
                    |m: &TripUpdate_StopTimeUpdate| { &m.departure },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.departure },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TripUpdate_StopTimeUpdate_ScheduleRelationship>>(
                    "schedule_relationship",
                    |m: &TripUpdate_StopTimeUpdate| { &m.schedule_relationship },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.schedule_relationship },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripUpdate_StopTimeUpdate>(
                    "TripUpdate_StopTimeUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TripUpdate_StopTimeUpdate {
        static mut instance: ::protobuf::lazy::Lazy<TripUpdate_StopTimeUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TripUpdate_StopTimeUpdate,
        };
        unsafe {
            instance.get(TripUpdate_StopTimeUpdate::new)
        }
    }
}

impl ::protobuf::Clear for TripUpdate_StopTimeUpdate {
    fn clear(&mut self) {
        self.clear_stop_sequence();
        self.clear_stop_id();
        self.clear_arrival();
        self.clear_departure();
        self.clear_schedule_relationship();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate_StopTimeUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TripUpdate_StopTimeUpdate_ScheduleRelationship {
    SCHEDULED = 0,
    SKIPPED = 1,
    NO_DATA = 2,
}

impl ::protobuf::ProtobufEnum for TripUpdate_StopTimeUpdate_ScheduleRelationship {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TripUpdate_StopTimeUpdate_ScheduleRelationship> {
        match value {
            0 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED),
            1 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::SKIPPED),
            2 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::NO_DATA),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TripUpdate_StopTimeUpdate_ScheduleRelationship] = &[
            TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED,
            TripUpdate_StopTimeUpdate_ScheduleRelationship::SKIPPED,
            TripUpdate_StopTimeUpdate_ScheduleRelationship::NO_DATA,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TripUpdate_StopTimeUpdate_ScheduleRelationship", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TripUpdate_StopTimeUpdate_ScheduleRelationship {
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeUpdate_ScheduleRelationship {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VehiclePosition {
    // message fields
    trip: ::protobuf::SingularPtrField<TripDescriptor>,
    vehicle: ::protobuf::SingularPtrField<VehicleDescriptor>,
    position: ::protobuf::SingularPtrField<Position>,
    current_stop_sequence: ::std::option::Option<u32>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    current_status: ::std::option::Option<VehiclePosition_VehicleStopStatus>,
    timestamp: ::std::option::Option<u64>,
    congestion_level: ::std::option::Option<VehiclePosition_CongestionLevel>,
    occupancy_status: ::std::option::Option<VehiclePosition_OccupancyStatus>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl VehiclePosition {
    pub fn new() -> VehiclePosition {
        ::std::default::Default::default()
    }

    // optional .TripDescriptor trip = 1;

    pub fn clear_trip(&mut self) {
        self.trip.clear();
    }

    pub fn has_trip(&self) -> bool {
        self.trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip(&mut self, v: TripDescriptor) {
        self.trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip(&mut self) -> &mut TripDescriptor {
        if self.trip.is_none() {
            self.trip.set_default();
        }
        self.trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip(&mut self) -> TripDescriptor {
        self.trip.take().unwrap_or_else(|| TripDescriptor::new())
    }

    pub fn get_trip(&self) -> &TripDescriptor {
        self.trip.as_ref().unwrap_or_else(|| TripDescriptor::default_instance())
    }

    // optional .VehicleDescriptor vehicle = 8;

    pub fn clear_vehicle(&mut self) {
        self.vehicle.clear();
    }

    pub fn has_vehicle(&self) -> bool {
        self.vehicle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vehicle(&mut self, v: VehicleDescriptor) {
        self.vehicle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vehicle(&mut self) -> &mut VehicleDescriptor {
        if self.vehicle.is_none() {
            self.vehicle.set_default();
        }
        self.vehicle.as_mut().unwrap()
    }

    // Take field
    pub fn take_vehicle(&mut self) -> VehicleDescriptor {
        self.vehicle.take().unwrap_or_else(|| VehicleDescriptor::new())
    }

    pub fn get_vehicle(&self) -> &VehicleDescriptor {
        self.vehicle.as_ref().unwrap_or_else(|| VehicleDescriptor::default_instance())
    }

    // optional .Position position = 2;

    pub fn clear_position(&mut self) {
        self.position.clear();
    }

    pub fn has_position(&self) -> bool {
        self.position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: Position) {
        self.position = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_position(&mut self) -> &mut Position {
        if self.position.is_none() {
            self.position.set_default();
        }
        self.position.as_mut().unwrap()
    }

    // Take field
    pub fn take_position(&mut self) -> Position {
        self.position.take().unwrap_or_else(|| Position::new())
    }

    pub fn get_position(&self) -> &Position {
        self.position.as_ref().unwrap_or_else(|| Position::default_instance())
    }

    // optional uint32 current_stop_sequence = 3;

    pub fn clear_current_stop_sequence(&mut self) {
        self.current_stop_sequence = ::std::option::Option::None;
    }

    pub fn has_current_stop_sequence(&self) -> bool {
        self.current_stop_sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_stop_sequence(&mut self, v: u32) {
        self.current_stop_sequence = ::std::option::Option::Some(v);
    }

    pub fn get_current_stop_sequence(&self) -> u32 {
        self.current_stop_sequence.unwrap_or(0)
    }

    // optional string stop_id = 7;

    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .VehiclePosition.VehicleStopStatus current_status = 4;

    pub fn clear_current_status(&mut self) {
        self.current_status = ::std::option::Option::None;
    }

    pub fn has_current_status(&self) -> bool {
        self.current_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_status(&mut self, v: VehiclePosition_VehicleStopStatus) {
        self.current_status = ::std::option::Option::Some(v);
    }

    pub fn get_current_status(&self) -> VehiclePosition_VehicleStopStatus {
        self.current_status.unwrap_or(VehiclePosition_VehicleStopStatus::IN_TRANSIT_TO)
    }

    // optional uint64 timestamp = 5;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }

    // optional .VehiclePosition.CongestionLevel congestion_level = 6;

    pub fn clear_congestion_level(&mut self) {
        self.congestion_level = ::std::option::Option::None;
    }

    pub fn has_congestion_level(&self) -> bool {
        self.congestion_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_congestion_level(&mut self, v: VehiclePosition_CongestionLevel) {
        self.congestion_level = ::std::option::Option::Some(v);
    }

    pub fn get_congestion_level(&self) -> VehiclePosition_CongestionLevel {
        self.congestion_level.unwrap_or(VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL)
    }

    // optional .VehiclePosition.OccupancyStatus occupancy_status = 9;

    pub fn clear_occupancy_status(&mut self) {
        self.occupancy_status = ::std::option::Option::None;
    }

    pub fn has_occupancy_status(&self) -> bool {
        self.occupancy_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_occupancy_status(&mut self, v: VehiclePosition_OccupancyStatus) {
        self.occupancy_status = ::std::option::Option::Some(v);
    }

    pub fn get_occupancy_status(&self) -> VehiclePosition_OccupancyStatus {
        self.occupancy_status.unwrap_or(VehiclePosition_OccupancyStatus::EMPTY)
    }
}

impl ::protobuf::Message for VehiclePosition {
    fn is_initialized(&self) -> bool {
        for v in &self.trip {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vehicle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.position {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vehicle)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.position)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.current_stop_sequence = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.current_status, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.congestion_level, 6, &mut self.unknown_fields)?
                },
                9 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.occupancy_status, 9, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.current_stop_sequence {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.current_status {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.congestion_level {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.occupancy_status {
            my_size += ::protobuf::rt::enum_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.position.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.current_stop_sequence {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.current_status {
            os.write_enum(4, v.value())?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.congestion_level {
            os.write_enum(6, v.value())?;
        }
        if let Some(v) = self.occupancy_status {
            os.write_enum(9, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VehiclePosition {
        VehiclePosition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor>>(
                    "trip",
                    |m: &VehiclePosition| { &m.trip },
                    |m: &mut VehiclePosition| { &mut m.trip },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehicleDescriptor>>(
                    "vehicle",
                    |m: &VehiclePosition| { &m.vehicle },
                    |m: &mut VehiclePosition| { &mut m.vehicle },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Position>>(
                    "position",
                    |m: &VehiclePosition| { &m.position },
                    |m: &mut VehiclePosition| { &mut m.position },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "current_stop_sequence",
                    |m: &VehiclePosition| { &m.current_stop_sequence },
                    |m: &mut VehiclePosition| { &mut m.current_stop_sequence },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "stop_id",
                    |m: &VehiclePosition| { &m.stop_id },
                    |m: &mut VehiclePosition| { &mut m.stop_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_VehicleStopStatus>>(
                    "current_status",
                    |m: &VehiclePosition| { &m.current_status },
                    |m: &mut VehiclePosition| { &mut m.current_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &VehiclePosition| { &m.timestamp },
                    |m: &mut VehiclePosition| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_CongestionLevel>>(
                    "congestion_level",
                    |m: &VehiclePosition| { &m.congestion_level },
                    |m: &mut VehiclePosition| { &mut m.congestion_level },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_OccupancyStatus>>(
                    "occupancy_status",
                    |m: &VehiclePosition| { &m.occupancy_status },
                    |m: &mut VehiclePosition| { &mut m.occupancy_status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VehiclePosition>(
                    "VehiclePosition",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VehiclePosition {
        static mut instance: ::protobuf::lazy::Lazy<VehiclePosition> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VehiclePosition,
        };
        unsafe {
            instance.get(VehiclePosition::new)
        }
    }
}

impl ::protobuf::Clear for VehiclePosition {
    fn clear(&mut self) {
        self.clear_trip();
        self.clear_vehicle();
        self.clear_position();
        self.clear_current_stop_sequence();
        self.clear_stop_id();
        self.clear_current_status();
        self.clear_timestamp();
        self.clear_congestion_level();
        self.clear_occupancy_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VehiclePosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehiclePosition_VehicleStopStatus {
    INCOMING_AT = 0,
    STOPPED_AT = 1,
    IN_TRANSIT_TO = 2,
}

impl ::protobuf::ProtobufEnum for VehiclePosition_VehicleStopStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehiclePosition_VehicleStopStatus> {
        match value {
            0 => ::std::option::Option::Some(VehiclePosition_VehicleStopStatus::INCOMING_AT),
            1 => ::std::option::Option::Some(VehiclePosition_VehicleStopStatus::STOPPED_AT),
            2 => ::std::option::Option::Some(VehiclePosition_VehicleStopStatus::IN_TRANSIT_TO),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehiclePosition_VehicleStopStatus] = &[
            VehiclePosition_VehicleStopStatus::INCOMING_AT,
            VehiclePosition_VehicleStopStatus::STOPPED_AT,
            VehiclePosition_VehicleStopStatus::IN_TRANSIT_TO,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("VehiclePosition_VehicleStopStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for VehiclePosition_VehicleStopStatus {
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_VehicleStopStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehiclePosition_CongestionLevel {
    UNKNOWN_CONGESTION_LEVEL = 0,
    RUNNING_SMOOTHLY = 1,
    STOP_AND_GO = 2,
    CONGESTION = 3,
    SEVERE_CONGESTION = 4,
}

impl ::protobuf::ProtobufEnum for VehiclePosition_CongestionLevel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehiclePosition_CongestionLevel> {
        match value {
            0 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL),
            1 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::RUNNING_SMOOTHLY),
            2 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::STOP_AND_GO),
            3 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::CONGESTION),
            4 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::SEVERE_CONGESTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehiclePosition_CongestionLevel] = &[
            VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL,
            VehiclePosition_CongestionLevel::RUNNING_SMOOTHLY,
            VehiclePosition_CongestionLevel::STOP_AND_GO,
            VehiclePosition_CongestionLevel::CONGESTION,
            VehiclePosition_CongestionLevel::SEVERE_CONGESTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("VehiclePosition_CongestionLevel", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for VehiclePosition_CongestionLevel {
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_CongestionLevel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehiclePosition_OccupancyStatus {
    EMPTY = 0,
    MANY_SEATS_AVAILABLE = 1,
    FEW_SEATS_AVAILABLE = 2,
    STANDING_ROOM_ONLY = 3,
    CRUSHED_STANDING_ROOM_ONLY = 4,
    FULL = 5,
    NOT_ACCEPTING_PASSENGERS = 6,
}

impl ::protobuf::ProtobufEnum for VehiclePosition_OccupancyStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehiclePosition_OccupancyStatus> {
        match value {
            0 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::EMPTY),
            1 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::MANY_SEATS_AVAILABLE),
            2 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::FEW_SEATS_AVAILABLE),
            3 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::STANDING_ROOM_ONLY),
            4 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::CRUSHED_STANDING_ROOM_ONLY),
            5 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::FULL),
            6 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::NOT_ACCEPTING_PASSENGERS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehiclePosition_OccupancyStatus] = &[
            VehiclePosition_OccupancyStatus::EMPTY,
            VehiclePosition_OccupancyStatus::MANY_SEATS_AVAILABLE,
            VehiclePosition_OccupancyStatus::FEW_SEATS_AVAILABLE,
            VehiclePosition_OccupancyStatus::STANDING_ROOM_ONLY,
            VehiclePosition_OccupancyStatus::CRUSHED_STANDING_ROOM_ONLY,
            VehiclePosition_OccupancyStatus::FULL,
            VehiclePosition_OccupancyStatus::NOT_ACCEPTING_PASSENGERS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("VehiclePosition_OccupancyStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for VehiclePosition_OccupancyStatus {
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_OccupancyStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Alert {
    // message fields
    active_period: ::protobuf::RepeatedField<TimeRange>,
    informed_entity: ::protobuf::RepeatedField<EntitySelector>,
    cause: ::std::option::Option<Alert_Cause>,
    effect: ::std::option::Option<Alert_Effect>,
    url: ::protobuf::SingularPtrField<TranslatedString>,
    header_text: ::protobuf::SingularPtrField<TranslatedString>,
    description_text: ::protobuf::SingularPtrField<TranslatedString>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Alert {
    pub fn new() -> Alert {
        ::std::default::Default::default()
    }

    // repeated .TimeRange active_period = 1;

    pub fn clear_active_period(&mut self) {
        self.active_period.clear();
    }

    // Param is passed by value, moved
    pub fn set_active_period(&mut self, v: ::protobuf::RepeatedField<TimeRange>) {
        self.active_period = v;
    }

    // Mutable pointer to the field.
    pub fn mut_active_period(&mut self) -> &mut ::protobuf::RepeatedField<TimeRange> {
        &mut self.active_period
    }

    // Take field
    pub fn take_active_period(&mut self) -> ::protobuf::RepeatedField<TimeRange> {
        ::std::mem::replace(&mut self.active_period, ::protobuf::RepeatedField::new())
    }

    pub fn get_active_period(&self) -> &[TimeRange] {
        &self.active_period
    }

    // repeated .EntitySelector informed_entity = 5;

    pub fn clear_informed_entity(&mut self) {
        self.informed_entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_informed_entity(&mut self, v: ::protobuf::RepeatedField<EntitySelector>) {
        self.informed_entity = v;
    }

    // Mutable pointer to the field.
    pub fn mut_informed_entity(&mut self) -> &mut ::protobuf::RepeatedField<EntitySelector> {
        &mut self.informed_entity
    }

    // Take field
    pub fn take_informed_entity(&mut self) -> ::protobuf::RepeatedField<EntitySelector> {
        ::std::mem::replace(&mut self.informed_entity, ::protobuf::RepeatedField::new())
    }

    pub fn get_informed_entity(&self) -> &[EntitySelector] {
        &self.informed_entity
    }

    // optional .Alert.Cause cause = 6;

    pub fn clear_cause(&mut self) {
        self.cause = ::std::option::Option::None;
    }

    pub fn has_cause(&self) -> bool {
        self.cause.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cause(&mut self, v: Alert_Cause) {
        self.cause = ::std::option::Option::Some(v);
    }

    pub fn get_cause(&self) -> Alert_Cause {
        self.cause.unwrap_or(Alert_Cause::UNKNOWN_CAUSE)
    }

    // optional .Alert.Effect effect = 7;

    pub fn clear_effect(&mut self) {
        self.effect = ::std::option::Option::None;
    }

    pub fn has_effect(&self) -> bool {
        self.effect.is_some()
    }

    // Param is passed by value, moved
    pub fn set_effect(&mut self, v: Alert_Effect) {
        self.effect = ::std::option::Option::Some(v);
    }

    pub fn get_effect(&self) -> Alert_Effect {
        self.effect.unwrap_or(Alert_Effect::UNKNOWN_EFFECT)
    }

    // optional .TranslatedString url = 8;

    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: TranslatedString) {
        self.url = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut TranslatedString {
        if self.url.is_none() {
            self.url.set_default();
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> TranslatedString {
        self.url.take().unwrap_or_else(|| TranslatedString::new())
    }

    pub fn get_url(&self) -> &TranslatedString {
        self.url.as_ref().unwrap_or_else(|| TranslatedString::default_instance())
    }

    // optional .TranslatedString header_text = 10;

    pub fn clear_header_text(&mut self) {
        self.header_text.clear();
    }

    pub fn has_header_text(&self) -> bool {
        self.header_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header_text(&mut self, v: TranslatedString) {
        self.header_text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_text(&mut self) -> &mut TranslatedString {
        if self.header_text.is_none() {
            self.header_text.set_default();
        }
        self.header_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_header_text(&mut self) -> TranslatedString {
        self.header_text.take().unwrap_or_else(|| TranslatedString::new())
    }

    pub fn get_header_text(&self) -> &TranslatedString {
        self.header_text.as_ref().unwrap_or_else(|| TranslatedString::default_instance())
    }

    // optional .TranslatedString description_text = 11;

    pub fn clear_description_text(&mut self) {
        self.description_text.clear();
    }

    pub fn has_description_text(&self) -> bool {
        self.description_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_description_text(&mut self, v: TranslatedString) {
        self.description_text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description_text(&mut self) -> &mut TranslatedString {
        if self.description_text.is_none() {
            self.description_text.set_default();
        }
        self.description_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_description_text(&mut self) -> TranslatedString {
        self.description_text.take().unwrap_or_else(|| TranslatedString::new())
    }

    pub fn get_description_text(&self) -> &TranslatedString {
        self.description_text.as_ref().unwrap_or_else(|| TranslatedString::default_instance())
    }
}

impl ::protobuf::Message for Alert {
    fn is_initialized(&self) -> bool {
        for v in &self.active_period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.informed_entity {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.url {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.header_text {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.description_text {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.active_period)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.informed_entity)?;
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.cause, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.effect, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.url)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header_text)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.description_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.active_period {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.informed_entity {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.cause {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.effect {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        if let Some(ref v) = self.url.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.header_text.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.description_text.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.active_period {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.informed_entity {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.cause {
            os.write_enum(6, v.value())?;
        }
        if let Some(v) = self.effect {
            os.write_enum(7, v.value())?;
        }
        if let Some(ref v) = self.url.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.header_text.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.description_text.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Alert {
        Alert::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TimeRange>>(
                    "active_period",
                    |m: &Alert| { &m.active_period },
                    |m: &mut Alert| { &mut m.active_period },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntitySelector>>(
                    "informed_entity",
                    |m: &Alert| { &m.informed_entity },
                    |m: &mut Alert| { &mut m.informed_entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Alert_Cause>>(
                    "cause",
                    |m: &Alert| { &m.cause },
                    |m: &mut Alert| { &mut m.cause },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Alert_Effect>>(
                    "effect",
                    |m: &Alert| { &m.effect },
                    |m: &mut Alert| { &mut m.effect },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                    "url",
                    |m: &Alert| { &m.url },
                    |m: &mut Alert| { &mut m.url },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                    "header_text",
                    |m: &Alert| { &m.header_text },
                    |m: &mut Alert| { &mut m.header_text },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                    "description_text",
                    |m: &Alert| { &m.description_text },
                    |m: &mut Alert| { &mut m.description_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Alert>(
                    "Alert",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Alert {
        static mut instance: ::protobuf::lazy::Lazy<Alert> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Alert,
        };
        unsafe {
            instance.get(Alert::new)
        }
    }
}

impl ::protobuf::Clear for Alert {
    fn clear(&mut self) {
        self.clear_active_period();
        self.clear_informed_entity();
        self.clear_cause();
        self.clear_effect();
        self.clear_url();
        self.clear_header_text();
        self.clear_description_text();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Alert {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Alert {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Alert_Cause {
    UNKNOWN_CAUSE = 1,
    OTHER_CAUSE = 2,
    TECHNICAL_PROBLEM = 3,
    STRIKE = 4,
    DEMONSTRATION = 5,
    ACCIDENT = 6,
    HOLIDAY = 7,
    WEATHER = 8,
    MAINTENANCE = 9,
    CONSTRUCTION = 10,
    POLICE_ACTIVITY = 11,
    MEDICAL_EMERGENCY = 12,
}

impl ::protobuf::ProtobufEnum for Alert_Cause {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Alert_Cause> {
        match value {
            1 => ::std::option::Option::Some(Alert_Cause::UNKNOWN_CAUSE),
            2 => ::std::option::Option::Some(Alert_Cause::OTHER_CAUSE),
            3 => ::std::option::Option::Some(Alert_Cause::TECHNICAL_PROBLEM),
            4 => ::std::option::Option::Some(Alert_Cause::STRIKE),
            5 => ::std::option::Option::Some(Alert_Cause::DEMONSTRATION),
            6 => ::std::option::Option::Some(Alert_Cause::ACCIDENT),
            7 => ::std::option::Option::Some(Alert_Cause::HOLIDAY),
            8 => ::std::option::Option::Some(Alert_Cause::WEATHER),
            9 => ::std::option::Option::Some(Alert_Cause::MAINTENANCE),
            10 => ::std::option::Option::Some(Alert_Cause::CONSTRUCTION),
            11 => ::std::option::Option::Some(Alert_Cause::POLICE_ACTIVITY),
            12 => ::std::option::Option::Some(Alert_Cause::MEDICAL_EMERGENCY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Alert_Cause] = &[
            Alert_Cause::UNKNOWN_CAUSE,
            Alert_Cause::OTHER_CAUSE,
            Alert_Cause::TECHNICAL_PROBLEM,
            Alert_Cause::STRIKE,
            Alert_Cause::DEMONSTRATION,
            Alert_Cause::ACCIDENT,
            Alert_Cause::HOLIDAY,
            Alert_Cause::WEATHER,
            Alert_Cause::MAINTENANCE,
            Alert_Cause::CONSTRUCTION,
            Alert_Cause::POLICE_ACTIVITY,
            Alert_Cause::MEDICAL_EMERGENCY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Alert_Cause", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Alert_Cause {
}

impl ::protobuf::reflect::ProtobufValue for Alert_Cause {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Alert_Effect {
    NO_SERVICE = 1,
    REDUCED_SERVICE = 2,
    SIGNIFICANT_DELAYS = 3,
    DETOUR = 4,
    ADDITIONAL_SERVICE = 5,
    MODIFIED_SERVICE = 6,
    OTHER_EFFECT = 7,
    UNKNOWN_EFFECT = 8,
    STOP_MOVED = 9,
}

impl ::protobuf::ProtobufEnum for Alert_Effect {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Alert_Effect> {
        match value {
            1 => ::std::option::Option::Some(Alert_Effect::NO_SERVICE),
            2 => ::std::option::Option::Some(Alert_Effect::REDUCED_SERVICE),
            3 => ::std::option::Option::Some(Alert_Effect::SIGNIFICANT_DELAYS),
            4 => ::std::option::Option::Some(Alert_Effect::DETOUR),
            5 => ::std::option::Option::Some(Alert_Effect::ADDITIONAL_SERVICE),
            6 => ::std::option::Option::Some(Alert_Effect::MODIFIED_SERVICE),
            7 => ::std::option::Option::Some(Alert_Effect::OTHER_EFFECT),
            8 => ::std::option::Option::Some(Alert_Effect::UNKNOWN_EFFECT),
            9 => ::std::option::Option::Some(Alert_Effect::STOP_MOVED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Alert_Effect] = &[
            Alert_Effect::NO_SERVICE,
            Alert_Effect::REDUCED_SERVICE,
            Alert_Effect::SIGNIFICANT_DELAYS,
            Alert_Effect::DETOUR,
            Alert_Effect::ADDITIONAL_SERVICE,
            Alert_Effect::MODIFIED_SERVICE,
            Alert_Effect::OTHER_EFFECT,
            Alert_Effect::UNKNOWN_EFFECT,
            Alert_Effect::STOP_MOVED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Alert_Effect", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Alert_Effect {
}

impl ::protobuf::reflect::ProtobufValue for Alert_Effect {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimeRange {
    // message fields
    start: ::std::option::Option<u64>,
    end: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TimeRange {
    pub fn new() -> TimeRange {
        ::std::default::Default::default()
    }

    // optional uint64 start = 1;

    pub fn clear_start(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u64) {
        self.start = ::std::option::Option::Some(v);
    }

    pub fn get_start(&self) -> u64 {
        self.start.unwrap_or(0)
    }

    // optional uint64 end = 2;

    pub fn clear_end(&mut self) {
        self.end = ::std::option::Option::None;
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: u64) {
        self.end = ::std::option::Option::Some(v);
    }

    pub fn get_end(&self) -> u64 {
        self.end.unwrap_or(0)
    }
}

impl ::protobuf::Message for TimeRange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.start {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.end {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.start {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.end {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeRange {
        TimeRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "start",
                    |m: &TimeRange| { &m.start },
                    |m: &mut TimeRange| { &mut m.start },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "end",
                    |m: &TimeRange| { &m.end },
                    |m: &mut TimeRange| { &mut m.end },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeRange>(
                    "TimeRange",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TimeRange {
        static mut instance: ::protobuf::lazy::Lazy<TimeRange> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeRange,
        };
        unsafe {
            instance.get(TimeRange::new)
        }
    }
}

impl ::protobuf::Clear for TimeRange {
    fn clear(&mut self) {
        self.clear_start();
        self.clear_end();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeRange {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Position {
    // message fields
    latitude: ::std::option::Option<f32>,
    longitude: ::std::option::Option<f32>,
    bearing: ::std::option::Option<f32>,
    odometer: ::std::option::Option<f64>,
    speed: ::std::option::Option<f32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Position {
    pub fn new() -> Position {
        ::std::default::Default::default()
    }

    // required float latitude = 1;

    pub fn clear_latitude(&mut self) {
        self.latitude = ::std::option::Option::None;
    }

    pub fn has_latitude(&self) -> bool {
        self.latitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f32) {
        self.latitude = ::std::option::Option::Some(v);
    }

    pub fn get_latitude(&self) -> f32 {
        self.latitude.unwrap_or(0.)
    }

    // required float longitude = 2;

    pub fn clear_longitude(&mut self) {
        self.longitude = ::std::option::Option::None;
    }

    pub fn has_longitude(&self) -> bool {
        self.longitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f32) {
        self.longitude = ::std::option::Option::Some(v);
    }

    pub fn get_longitude(&self) -> f32 {
        self.longitude.unwrap_or(0.)
    }

    // optional float bearing = 3;

    pub fn clear_bearing(&mut self) {
        self.bearing = ::std::option::Option::None;
    }

    pub fn has_bearing(&self) -> bool {
        self.bearing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bearing(&mut self, v: f32) {
        self.bearing = ::std::option::Option::Some(v);
    }

    pub fn get_bearing(&self) -> f32 {
        self.bearing.unwrap_or(0.)
    }

    // optional double odometer = 4;

    pub fn clear_odometer(&mut self) {
        self.odometer = ::std::option::Option::None;
    }

    pub fn has_odometer(&self) -> bool {
        self.odometer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_odometer(&mut self, v: f64) {
        self.odometer = ::std::option::Option::Some(v);
    }

    pub fn get_odometer(&self) -> f64 {
        self.odometer.unwrap_or(0.)
    }

    // optional float speed = 5;

    pub fn clear_speed(&mut self) {
        self.speed = ::std::option::Option::None;
    }

    pub fn has_speed(&self) -> bool {
        self.speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: f32) {
        self.speed = ::std::option::Option::Some(v);
    }

    pub fn get_speed(&self) -> f32 {
        self.speed.unwrap_or(0.)
    }
}

impl ::protobuf::Message for Position {
    fn is_initialized(&self) -> bool {
        if self.latitude.is_none() {
            return false;
        }
        if self.longitude.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.latitude = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.longitude = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.bearing = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.odometer = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.speed = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.latitude {
            my_size += 5;
        }
        if let Some(v) = self.longitude {
            my_size += 5;
        }
        if let Some(v) = self.bearing {
            my_size += 5;
        }
        if let Some(v) = self.odometer {
            my_size += 9;
        }
        if let Some(v) = self.speed {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.latitude {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.longitude {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.bearing {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.odometer {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.speed {
            os.write_float(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Position {
        Position::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "latitude",
                    |m: &Position| { &m.latitude },
                    |m: &mut Position| { &mut m.latitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "longitude",
                    |m: &Position| { &m.longitude },
                    |m: &mut Position| { &mut m.longitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "bearing",
                    |m: &Position| { &m.bearing },
                    |m: &mut Position| { &mut m.bearing },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "odometer",
                    |m: &Position| { &m.odometer },
                    |m: &mut Position| { &mut m.odometer },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "speed",
                    |m: &Position| { &m.speed },
                    |m: &mut Position| { &mut m.speed },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Position>(
                    "Position",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Position {
        static mut instance: ::protobuf::lazy::Lazy<Position> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Position,
        };
        unsafe {
            instance.get(Position::new)
        }
    }
}

impl ::protobuf::Clear for Position {
    fn clear(&mut self) {
        self.clear_latitude();
        self.clear_longitude();
        self.clear_bearing();
        self.clear_odometer();
        self.clear_speed();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Position {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Position {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripDescriptor {
    // message fields
    trip_id: ::protobuf::SingularField<::std::string::String>,
    route_id: ::protobuf::SingularField<::std::string::String>,
    direction_id: ::std::option::Option<u32>,
    start_time: ::protobuf::SingularField<::std::string::String>,
    start_date: ::protobuf::SingularField<::std::string::String>,
    schedule_relationship: ::std::option::Option<TripDescriptor_ScheduleRelationship>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TripDescriptor {
    pub fn new() -> TripDescriptor {
        ::std::default::Default::default()
    }

    // optional string trip_id = 1;

    pub fn clear_trip_id(&mut self) {
        self.trip_id.clear();
    }

    pub fn has_trip_id(&self) -> bool {
        self.trip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip_id(&mut self, v: ::std::string::String) {
        self.trip_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip_id(&mut self) -> &mut ::std::string::String {
        if self.trip_id.is_none() {
            self.trip_id.set_default();
        }
        self.trip_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip_id(&mut self) -> ::std::string::String {
        self.trip_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_trip_id(&self) -> &str {
        match self.trip_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string route_id = 5;

    pub fn clear_route_id(&mut self) {
        self.route_id.clear();
    }

    pub fn has_route_id(&self) -> bool {
        self.route_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_id(&mut self, v: ::std::string::String) {
        self.route_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_id(&mut self) -> &mut ::std::string::String {
        if self.route_id.is_none() {
            self.route_id.set_default();
        }
        self.route_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_route_id(&mut self) -> ::std::string::String {
        self.route_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_route_id(&self) -> &str {
        match self.route_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional uint32 direction_id = 6;

    pub fn clear_direction_id(&mut self) {
        self.direction_id = ::std::option::Option::None;
    }

    pub fn has_direction_id(&self) -> bool {
        self.direction_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction_id(&mut self, v: u32) {
        self.direction_id = ::std::option::Option::Some(v);
    }

    pub fn get_direction_id(&self) -> u32 {
        self.direction_id.unwrap_or(0)
    }

    // optional string start_time = 2;

    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::std::string::String) {
        self.start_time = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::std::string::String {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::std::string::String {
        self.start_time.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_start_time(&self) -> &str {
        match self.start_time.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string start_date = 3;

    pub fn clear_start_date(&mut self) {
        self.start_date.clear();
    }

    pub fn has_start_date(&self) -> bool {
        self.start_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: ::std::string::String) {
        self.start_date = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_date(&mut self) -> &mut ::std::string::String {
        if self.start_date.is_none() {
            self.start_date.set_default();
        }
        self.start_date.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_date(&mut self) -> ::std::string::String {
        self.start_date.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_start_date(&self) -> &str {
        match self.start_date.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .TripDescriptor.ScheduleRelationship schedule_relationship = 4;

    pub fn clear_schedule_relationship(&mut self) {
        self.schedule_relationship = ::std::option::Option::None;
    }

    pub fn has_schedule_relationship(&self) -> bool {
        self.schedule_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule_relationship(&mut self, v: TripDescriptor_ScheduleRelationship) {
        self.schedule_relationship = ::std::option::Option::Some(v);
    }

    pub fn get_schedule_relationship(&self) -> TripDescriptor_ScheduleRelationship {
        self.schedule_relationship.unwrap_or(TripDescriptor_ScheduleRelationship::SCHEDULED)
    }
}

impl ::protobuf::Message for TripDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.trip_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.route_id)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.direction_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.start_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.start_date)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.schedule_relationship, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.route_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.direction_id {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.start_time.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.start_date.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.schedule_relationship {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.route_id.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.direction_id {
            os.write_uint32(6, v)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.start_date.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.schedule_relationship {
            os.write_enum(4, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripDescriptor {
        TripDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trip_id",
                    |m: &TripDescriptor| { &m.trip_id },
                    |m: &mut TripDescriptor| { &mut m.trip_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "route_id",
                    |m: &TripDescriptor| { &m.route_id },
                    |m: &mut TripDescriptor| { &mut m.route_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "direction_id",
                    |m: &TripDescriptor| { &m.direction_id },
                    |m: &mut TripDescriptor| { &mut m.direction_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "start_time",
                    |m: &TripDescriptor| { &m.start_time },
                    |m: &mut TripDescriptor| { &mut m.start_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "start_date",
                    |m: &TripDescriptor| { &m.start_date },
                    |m: &mut TripDescriptor| { &mut m.start_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TripDescriptor_ScheduleRelationship>>(
                    "schedule_relationship",
                    |m: &TripDescriptor| { &m.schedule_relationship },
                    |m: &mut TripDescriptor| { &mut m.schedule_relationship },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripDescriptor>(
                    "TripDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TripDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<TripDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TripDescriptor,
        };
        unsafe {
            instance.get(TripDescriptor::new)
        }
    }
}

impl ::protobuf::Clear for TripDescriptor {
    fn clear(&mut self) {
        self.clear_trip_id();
        self.clear_route_id();
        self.clear_direction_id();
        self.clear_start_time();
        self.clear_start_date();
        self.clear_schedule_relationship();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TripDescriptor_ScheduleRelationship {
    SCHEDULED = 0,
    ADDED = 1,
    UNSCHEDULED = 2,
    CANCELED = 3,
}

impl ::protobuf::ProtobufEnum for TripDescriptor_ScheduleRelationship {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TripDescriptor_ScheduleRelationship> {
        match value {
            0 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::SCHEDULED),
            1 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::ADDED),
            2 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::UNSCHEDULED),
            3 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::CANCELED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TripDescriptor_ScheduleRelationship] = &[
            TripDescriptor_ScheduleRelationship::SCHEDULED,
            TripDescriptor_ScheduleRelationship::ADDED,
            TripDescriptor_ScheduleRelationship::UNSCHEDULED,
            TripDescriptor_ScheduleRelationship::CANCELED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TripDescriptor_ScheduleRelationship", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TripDescriptor_ScheduleRelationship {
}

impl ::protobuf::reflect::ProtobufValue for TripDescriptor_ScheduleRelationship {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VehicleDescriptor {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    label: ::protobuf::SingularField<::std::string::String>,
    license_plate: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl VehicleDescriptor {
    pub fn new() -> VehicleDescriptor {
        ::std::default::Default::default()
    }

    // optional string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string label = 2;

    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        self.label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_label(&self) -> &str {
        match self.label.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string license_plate = 3;

    pub fn clear_license_plate(&mut self) {
        self.license_plate.clear();
    }

    pub fn has_license_plate(&self) -> bool {
        self.license_plate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_license_plate(&mut self, v: ::std::string::String) {
        self.license_plate = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_license_plate(&mut self) -> &mut ::std::string::String {
        if self.license_plate.is_none() {
            self.license_plate.set_default();
        }
        self.license_plate.as_mut().unwrap()
    }

    // Take field
    pub fn take_license_plate(&mut self) -> ::std::string::String {
        self.license_plate.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_license_plate(&self) -> &str {
        match self.license_plate.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for VehicleDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.license_plate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.label.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.license_plate.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.label.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.license_plate.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VehicleDescriptor {
        VehicleDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &VehicleDescriptor| { &m.id },
                    |m: &mut VehicleDescriptor| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label",
                    |m: &VehicleDescriptor| { &m.label },
                    |m: &mut VehicleDescriptor| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "license_plate",
                    |m: &VehicleDescriptor| { &m.license_plate },
                    |m: &mut VehicleDescriptor| { &mut m.license_plate },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VehicleDescriptor>(
                    "VehicleDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VehicleDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<VehicleDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VehicleDescriptor,
        };
        unsafe {
            instance.get(VehicleDescriptor::new)
        }
    }
}

impl ::protobuf::Clear for VehicleDescriptor {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_label();
        self.clear_license_plate();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VehicleDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VehicleDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EntitySelector {
    // message fields
    agency_id: ::protobuf::SingularField<::std::string::String>,
    route_id: ::protobuf::SingularField<::std::string::String>,
    route_type: ::std::option::Option<i32>,
    trip: ::protobuf::SingularPtrField<TripDescriptor>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl EntitySelector {
    pub fn new() -> EntitySelector {
        ::std::default::Default::default()
    }

    // optional string agency_id = 1;

    pub fn clear_agency_id(&mut self) {
        self.agency_id.clear();
    }

    pub fn has_agency_id(&self) -> bool {
        self.agency_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agency_id(&mut self, v: ::std::string::String) {
        self.agency_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agency_id(&mut self) -> &mut ::std::string::String {
        if self.agency_id.is_none() {
            self.agency_id.set_default();
        }
        self.agency_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_agency_id(&mut self) -> ::std::string::String {
        self.agency_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_agency_id(&self) -> &str {
        match self.agency_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string route_id = 2;

    pub fn clear_route_id(&mut self) {
        self.route_id.clear();
    }

    pub fn has_route_id(&self) -> bool {
        self.route_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_id(&mut self, v: ::std::string::String) {
        self.route_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_id(&mut self) -> &mut ::std::string::String {
        if self.route_id.is_none() {
            self.route_id.set_default();
        }
        self.route_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_route_id(&mut self) -> ::std::string::String {
        self.route_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_route_id(&self) -> &str {
        match self.route_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional int32 route_type = 3;

    pub fn clear_route_type(&mut self) {
        self.route_type = ::std::option::Option::None;
    }

    pub fn has_route_type(&self) -> bool {
        self.route_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_type(&mut self, v: i32) {
        self.route_type = ::std::option::Option::Some(v);
    }

    pub fn get_route_type(&self) -> i32 {
        self.route_type.unwrap_or(0)
    }

    // optional .TripDescriptor trip = 4;

    pub fn clear_trip(&mut self) {
        self.trip.clear();
    }

    pub fn has_trip(&self) -> bool {
        self.trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip(&mut self, v: TripDescriptor) {
        self.trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip(&mut self) -> &mut TripDescriptor {
        if self.trip.is_none() {
            self.trip.set_default();
        }
        self.trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip(&mut self) -> TripDescriptor {
        self.trip.take().unwrap_or_else(|| TripDescriptor::new())
    }

    pub fn get_trip(&self) -> &TripDescriptor {
        self.trip.as_ref().unwrap_or_else(|| TripDescriptor::default_instance())
    }

    // optional string stop_id = 5;

    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for EntitySelector {
    fn is_initialized(&self) -> bool {
        for v in &self.trip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.agency_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.route_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.route_type = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.agency_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.route_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.route_type {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.agency_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.route_id.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.route_type {
            os.write_int32(3, v)?;
        }
        if let Some(ref v) = self.trip.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntitySelector {
        EntitySelector::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "agency_id",
                    |m: &EntitySelector| { &m.agency_id },
                    |m: &mut EntitySelector| { &mut m.agency_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "route_id",
                    |m: &EntitySelector| { &m.route_id },
                    |m: &mut EntitySelector| { &mut m.route_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "route_type",
                    |m: &EntitySelector| { &m.route_type },
                    |m: &mut EntitySelector| { &mut m.route_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor>>(
                    "trip",
                    |m: &EntitySelector| { &m.trip },
                    |m: &mut EntitySelector| { &mut m.trip },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "stop_id",
                    |m: &EntitySelector| { &m.stop_id },
                    |m: &mut EntitySelector| { &mut m.stop_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EntitySelector>(
                    "EntitySelector",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EntitySelector {
        static mut instance: ::protobuf::lazy::Lazy<EntitySelector> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EntitySelector,
        };
        unsafe {
            instance.get(EntitySelector::new)
        }
    }
}

impl ::protobuf::Clear for EntitySelector {
    fn clear(&mut self) {
        self.clear_agency_id();
        self.clear_route_id();
        self.clear_route_type();
        self.clear_trip();
        self.clear_stop_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntitySelector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntitySelector {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TranslatedString {
    // message fields
    translation: ::protobuf::RepeatedField<TranslatedString_Translation>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TranslatedString {
    pub fn new() -> TranslatedString {
        ::std::default::Default::default()
    }

    // repeated .TranslatedString.Translation translation = 1;

    pub fn clear_translation(&mut self) {
        self.translation.clear();
    }

    // Param is passed by value, moved
    pub fn set_translation(&mut self, v: ::protobuf::RepeatedField<TranslatedString_Translation>) {
        self.translation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_translation(&mut self) -> &mut ::protobuf::RepeatedField<TranslatedString_Translation> {
        &mut self.translation
    }

    // Take field
    pub fn take_translation(&mut self) -> ::protobuf::RepeatedField<TranslatedString_Translation> {
        ::std::mem::replace(&mut self.translation, ::protobuf::RepeatedField::new())
    }

    pub fn get_translation(&self) -> &[TranslatedString_Translation] {
        &self.translation
    }
}

impl ::protobuf::Message for TranslatedString {
    fn is_initialized(&self) -> bool {
        for v in &self.translation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.translation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.translation {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.translation {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslatedString {
        TranslatedString::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString_Translation>>(
                    "translation",
                    |m: &TranslatedString| { &m.translation },
                    |m: &mut TranslatedString| { &mut m.translation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TranslatedString>(
                    "TranslatedString",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TranslatedString {
        static mut instance: ::protobuf::lazy::Lazy<TranslatedString> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TranslatedString,
        };
        unsafe {
            instance.get(TranslatedString::new)
        }
    }
}

impl ::protobuf::Clear for TranslatedString {
    fn clear(&mut self) {
        self.clear_translation();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslatedString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslatedString {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TranslatedString_Translation {
    // message fields
    text: ::protobuf::SingularField<::std::string::String>,
    language: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TranslatedString_Translation {
    pub fn new() -> TranslatedString_Translation {
        ::std::default::Default::default()
    }

    // required string text = 1;

    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text.set_default();
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string language = 2;

    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language.set_default();
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for TranslatedString_Translation {
    fn is_initialized(&self) -> bool {
        if self.text.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.text)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.language)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.text.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.language.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslatedString_Translation {
        TranslatedString_Translation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &TranslatedString_Translation| { &m.text },
                    |m: &mut TranslatedString_Translation| { &mut m.text },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "language",
                    |m: &TranslatedString_Translation| { &m.language },
                    |m: &mut TranslatedString_Translation| { &mut m.language },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TranslatedString_Translation>(
                    "TranslatedString_Translation",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TranslatedString_Translation {
        static mut instance: ::protobuf::lazy::Lazy<TranslatedString_Translation> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TranslatedString_Translation,
        };
        unsafe {
            instance.get(TranslatedString_Translation::new)
        }
    }
}

impl ::protobuf::Clear for TranslatedString_Translation {
    fn clear(&mut self) {
        self.clear_text();
        self.clear_language();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslatedString_Translation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslatedString_Translation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13gtfs-realtime.proto\"_\n\x0bFeedMessage\x12#\n\x06header\x18\x01\
    \x20\x02(\x0b2\x0b.FeedHeaderR\x06header\x12#\n\x06entity\x18\x02\x20\
    \x03(\x0b2\x0b.FeedEntityR\x06entity*\x06\x08\xe8\x07\x10\xd0\x0f\"\xee\
    \x01\n\nFeedHeader\x122\n\x15gtfs_realtime_version\x18\x01\x20\x02(\tR\
    \x13gtfsRealtimeVersion\x12P\n\x0eincrementality\x18\x02\x20\x01(\x0e2\
    \x1a.FeedHeader.Incrementality:\x0cFULL_DATASETR\x0eincrementality\x12\
    \x1c\n\ttimestamp\x18\x03\x20\x01(\x04R\ttimestamp\"4\n\x0eIncrementalit\
    y\x12\x10\n\x0cFULL_DATASET\x10\0\x12\x10\n\x0cDIFFERENTIAL\x10\x01*\x06\
    \x08\xe8\x07\x10\xd0\x0f\"\xc2\x01\n\nFeedEntity\x12\x0e\n\x02id\x18\x01\
    \x20\x02(\tR\x02id\x12$\n\nis_deleted\x18\x02\x20\x01(\x08:\x05falseR\ti\
    sDeleted\x12,\n\x0btrip_update\x18\x03\x20\x01(\x0b2\x0b.TripUpdateR\ntr\
    ipUpdate\x12*\n\x07vehicle\x18\x04\x20\x01(\x0b2\x10.VehiclePositionR\
    \x07vehicle\x12\x1c\n\x05alert\x18\x05\x20\x01(\x0b2\x06.AlertR\x05alert\
    *\x06\x08\xe8\x07\x10\xd0\x0f\"\xbf\x05\n\nTripUpdate\x12#\n\x04trip\x18\
    \x01\x20\x02(\x0b2\x0f.TripDescriptorR\x04trip\x12,\n\x07vehicle\x18\x03\
    \x20\x01(\x0b2\x12.VehicleDescriptorR\x07vehicle\x12D\n\x10stop_time_upd\
    ate\x18\x02\x20\x03(\x0b2\x1a.TripUpdate.StopTimeUpdateR\x0estopTimeUpda\
    te\x12\x1c\n\ttimestamp\x18\x04\x20\x01(\x04R\ttimestamp\x12\x14\n\x05de\
    lay\x18\x05\x20\x01(\x05R\x05delay\x1ac\n\rStopTimeEvent\x12\x14\n\x05de\
    lay\x18\x01\x20\x01(\x05R\x05delay\x12\x12\n\x04time\x18\x02\x20\x01(\
    \x03R\x04time\x12\x20\n\x0buncertainty\x18\x03\x20\x01(\x05R\x0buncertai\
    nty*\x06\x08\xe8\x07\x10\xd0\x0f\x1a\xf6\x02\n\x0eStopTimeUpdate\x12#\n\
    \rstop_sequence\x18\x01\x20\x01(\rR\x0cstopSequence\x12\x17\n\x07stop_id\
    \x18\x04\x20\x01(\tR\x06stopId\x123\n\x07arrival\x18\x02\x20\x01(\x0b2\
    \x19.TripUpdate.StopTimeEventR\x07arrival\x127\n\tdeparture\x18\x03\x20\
    \x01(\x0b2\x19.TripUpdate.StopTimeEventR\tdeparture\x12o\n\x15schedule_r\
    elationship\x18\x05\x20\x01(\x0e2/.TripUpdate.StopTimeUpdate.ScheduleRel\
    ationship:\tSCHEDULEDR\x14scheduleRelationship\"?\n\x14ScheduleRelations\
    hip\x12\r\n\tSCHEDULED\x10\0\x12\x0b\n\x07SKIPPED\x10\x01\x12\x0b\n\x07N\
    O_DATA\x10\x02*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xe8\x07\x10\xd0\x0f\
    \"\xec\x06\n\x0fVehiclePosition\x12#\n\x04trip\x18\x01\x20\x01(\x0b2\x0f\
    .TripDescriptorR\x04trip\x12,\n\x07vehicle\x18\x08\x20\x01(\x0b2\x12.Veh\
    icleDescriptorR\x07vehicle\x12%\n\x08position\x18\x02\x20\x01(\x0b2\t.Po\
    sitionR\x08position\x122\n\x15current_stop_sequence\x18\x03\x20\x01(\rR\
    \x13currentStopSequence\x12\x17\n\x07stop_id\x18\x07\x20\x01(\tR\x06stop\
    Id\x12X\n\x0ecurrent_status\x18\x04\x20\x01(\x0e2\".VehiclePosition.Vehi\
    cleStopStatus:\rIN_TRANSIT_TOR\rcurrentStatus\x12\x1c\n\ttimestamp\x18\
    \x05\x20\x01(\x04R\ttimestamp\x12K\n\x10congestion_level\x18\x06\x20\x01\
    (\x0e2\x20.VehiclePosition.CongestionLevelR\x0fcongestionLevel\x12K\n\
    \x10occupancy_status\x18\t\x20\x01(\x0e2\x20.VehiclePosition.OccupancySt\
    atusR\x0foccupancyStatus\"G\n\x11VehicleStopStatus\x12\x0f\n\x0bINCOMING\
    _AT\x10\0\x12\x0e\n\nSTOPPED_AT\x10\x01\x12\x11\n\rIN_TRANSIT_TO\x10\x02\
    \"}\n\x0fCongestionLevel\x12\x1c\n\x18UNKNOWN_CONGESTION_LEVEL\x10\0\x12\
    \x14\n\x10RUNNING_SMOOTHLY\x10\x01\x12\x0f\n\x0bSTOP_AND_GO\x10\x02\x12\
    \x0e\n\nCONGESTION\x10\x03\x12\x15\n\x11SEVERE_CONGESTION\x10\x04\"\xaf\
    \x01\n\x0fOccupancyStatus\x12\t\n\x05EMPTY\x10\0\x12\x18\n\x14MANY_SEATS\
    _AVAILABLE\x10\x01\x12\x17\n\x13FEW_SEATS_AVAILABLE\x10\x02\x12\x16\n\
    \x12STANDING_ROOM_ONLY\x10\x03\x12\x1e\n\x1aCRUSHED_STANDING_ROOM_ONLY\
    \x10\x04\x12\x08\n\x04FULL\x10\x05\x12\x1c\n\x18NOT_ACCEPTING_PASSENGERS\
    \x10\x06*\x06\x08\xe8\x07\x10\xd0\x0f\"\x8e\x06\n\x05Alert\x12/\n\ractiv\
    e_period\x18\x01\x20\x03(\x0b2\n.TimeRangeR\x0cactivePeriod\x128\n\x0fin\
    formed_entity\x18\x05\x20\x03(\x0b2\x0f.EntitySelectorR\x0einformedEntit\
    y\x121\n\x05cause\x18\x06\x20\x01(\x0e2\x0c.Alert.Cause:\rUNKNOWN_CAUSER\
    \x05cause\x125\n\x06effect\x18\x07\x20\x01(\x0e2\r.Alert.Effect:\x0eUNKN\
    OWN_EFFECTR\x06effect\x12#\n\x03url\x18\x08\x20\x01(\x0b2\x11.Translated\
    StringR\x03url\x122\n\x0bheader_text\x18\n\x20\x01(\x0b2\x11.TranslatedS\
    tringR\nheaderText\x12<\n\x10description_text\x18\x0b\x20\x01(\x0b2\x11.\
    TranslatedStringR\x0fdescriptionText\"\xd8\x01\n\x05Cause\x12\x11\n\rUNK\
    NOWN_CAUSE\x10\x01\x12\x0f\n\x0bOTHER_CAUSE\x10\x02\x12\x15\n\x11TECHNIC\
    AL_PROBLEM\x10\x03\x12\n\n\x06STRIKE\x10\x04\x12\x11\n\rDEMONSTRATION\
    \x10\x05\x12\x0c\n\x08ACCIDENT\x10\x06\x12\x0b\n\x07HOLIDAY\x10\x07\x12\
    \x0b\n\x07WEATHER\x10\x08\x12\x0f\n\x0bMAINTENANCE\x10\t\x12\x10\n\x0cCO\
    NSTRUCTION\x10\n\x12\x13\n\x0fPOLICE_ACTIVITY\x10\x0b\x12\x15\n\x11MEDIC\
    AL_EMERGENCY\x10\x0c\"\xb5\x01\n\x06Effect\x12\x0e\n\nNO_SERVICE\x10\x01\
    \x12\x13\n\x0fREDUCED_SERVICE\x10\x02\x12\x16\n\x12SIGNIFICANT_DELAYS\
    \x10\x03\x12\n\n\x06DETOUR\x10\x04\x12\x16\n\x12ADDITIONAL_SERVICE\x10\
    \x05\x12\x14\n\x10MODIFIED_SERVICE\x10\x06\x12\x10\n\x0cOTHER_EFFECT\x10\
    \x07\x12\x12\n\x0eUNKNOWN_EFFECT\x10\x08\x12\x0e\n\nSTOP_MOVED\x10\t*\
    \x06\x08\xe8\x07\x10\xd0\x0f\";\n\tTimeRange\x12\x14\n\x05start\x18\x01\
    \x20\x01(\x04R\x05start\x12\x10\n\x03end\x18\x02\x20\x01(\x04R\x03end*\
    \x06\x08\xe8\x07\x10\xd0\x0f\"\x98\x01\n\x08Position\x12\x1a\n\x08latitu\
    de\x18\x01\x20\x02(\x02R\x08latitude\x12\x1c\n\tlongitude\x18\x02\x20\
    \x02(\x02R\tlongitude\x12\x18\n\x07bearing\x18\x03\x20\x01(\x02R\x07bear\
    ing\x12\x1a\n\x08odometer\x18\x04\x20\x01(\x01R\x08odometer\x12\x14\n\
    \x05speed\x18\x05\x20\x01(\x02R\x05speed*\x06\x08\xe8\x07\x10\xd0\x0f\"\
    \xd9\x02\n\x0eTripDescriptor\x12\x17\n\x07trip_id\x18\x01\x20\x01(\tR\
    \x06tripId\x12\x19\n\x08route_id\x18\x05\x20\x01(\tR\x07routeId\x12!\n\
    \x0cdirection_id\x18\x06\x20\x01(\rR\x0bdirectionId\x12\x1d\n\nstart_tim\
    e\x18\x02\x20\x01(\tR\tstartTime\x12\x1d\n\nstart_date\x18\x03\x20\x01(\
    \tR\tstartDate\x12Y\n\x15schedule_relationship\x18\x04\x20\x01(\x0e2$.Tr\
    ipDescriptor.ScheduleRelationshipR\x14scheduleRelationship\"O\n\x14Sched\
    uleRelationship\x12\r\n\tSCHEDULED\x10\0\x12\t\n\x05ADDED\x10\x01\x12\
    \x0f\n\x0bUNSCHEDULED\x10\x02\x12\x0c\n\x08CANCELED\x10\x03*\x06\x08\xe8\
    \x07\x10\xd0\x0f\"f\n\x11VehicleDescriptor\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05label\x12#\n\rl\
    icense_plate\x18\x03\x20\x01(\tR\x0clicensePlate*\x06\x08\xe8\x07\x10\
    \xd0\x0f\"\xad\x01\n\x0eEntitySelector\x12\x1b\n\tagency_id\x18\x01\x20\
    \x01(\tR\x08agencyId\x12\x19\n\x08route_id\x18\x02\x20\x01(\tR\x07routeI\
    d\x12\x1d\n\nroute_type\x18\x03\x20\x01(\x05R\trouteType\x12#\n\x04trip\
    \x18\x04\x20\x01(\x0b2\x0f.TripDescriptorR\x04trip\x12\x17\n\x07stop_id\
    \x18\x05\x20\x01(\tR\x06stopId*\x06\x08\xe8\x07\x10\xd0\x0f\"\xa2\x01\n\
    \x10TranslatedString\x12?\n\x0btranslation\x18\x01\x20\x03(\x0b2\x1d.Tra\
    nslatedString.TranslationR\x0btranslation\x1aE\n\x0bTranslation\x12\x12\
    \n\x04text\x18\x01\x20\x02(\tR\x04text\x12\x1a\n\x08language\x18\x02\x20\
    \x01(\tR\x08language*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xe8\x07\x10\
    \xd0\x0f\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
